module Main

import Data.Vect

insert : Ord elem => (x : elem) -> (xsSorted : Vect len elem) -> Vect (S len) elem
insert x [] = [x]
insert x (y :: xs) = if x < y then x :: y :: xs
                              else y :: insert x xs

insSort : Ord elem => Vect n elem -> Vect n elem
insSort [] = []
insSort (x :: xs) = let xsSorted = insSort xs in
                        insert x xsSorted

my_length : List a -> Nat
my_length [] = 0
my_length (x :: xs) = 1 + my_length xs

my_reverse : List a -> List a
my_reverse [] = []
my_reverse (x :: xs) = my_reverse xs ++ [x]

my_map : (a -> b) -> List a -> List b
my_map f [] = []
my_map f (x :: xs) = f x :: my_map f xs

my_map_vect : (a -> b) -> Vect n a -> Vect n b
my_map_vect f [] = []
my_map_vect f (x :: xs) = f x :: my_map_vect f xs

transposeMat : Vect m (Vect n elem) -> Vect n (Vect m elem)
transposeMat [] = replicate _ []
transposeMat (x :: xs) = Vect.zipWith (::) x $ transposeMat xs

addMatrix : Num elem => Vect m (Vect n elem) -> Vect m (Vect n elem) -> Vect m (Vect n elem)
addMatrix [] [] = []
addMatrix (x :: xs) (y :: ys) = Vect.zipWith (+) x y :: addMatrix xs ys

reduceRows : Num elem => Vect n elem -> Vect n elem -> elem
reduceRows xs ys = let merged = Vect.zipWith (*) xs ys in
                       foldl (+) 0 merged
mutual
  computeMult : Num elem => (xs : Vect m (Vect n elem)) -> (ysTrans : Vect p (Vect n elem)) -> Vect m (Vect p elem)
  computeMult [] [] = []
  computeMult [] (x :: xs) = []
  computeMult {m} x [] = replicate m []
  computeMult (row :: rows) cols = let computedRow = map (reduceRows row) cols in
                                       computedRow :: computeMult rows cols

  multMatrix : Num numType =>
               Vect n (Vect m numType) -> Vect m (Vect p numType) ->
               Vect n (Vect p numType)
  multMatrix xs ys = let ysTrans = transposeMat ys in
                         computeMult xs ysTrans

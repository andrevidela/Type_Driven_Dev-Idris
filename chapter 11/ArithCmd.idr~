
import Data.Primitives.Views
import System

%default total


data Fuel = Dry | More (Lazy Fuel)

data Command : Type -> Type where
  PutStr : String -> Command ()
  GetLine : Command String

runCommand : Command a -> IO a
runCommand (PutStr x) = ?rest_1
runCommand GetLine = ?rest_2

data ConsoleIO : Type -> Type where
  Quit : a -> ConsoleIO a
  Do : Command a -> (a -> Inf (ConsoleIO b)) -> ConsoleIO b

(>>=) : Command a -> (a -> Inf (ConsoleIO b)) -> ConsoleIO b
(>>=) = Do

run : Fuel -> ConsoleIO a -> IO (Maybe a)
run Dry p = pure Nothing
run fuel (Quit val) = do pure (Just val)
run (More fuel) (Do action next) = do result <- runCommand action
                                      run fuel (next result)

randoms : Int -> Stream Int
randoms seed = let seed' = 1664525 * seed + 1013904223 in
                   (seed' `shiftR` 2) :: randoms seed'
arithInputs : Int -> Stream Int
arithInputs seed = map bound (randoms seed)
where
  bound : Int -> Int
  bound num with (divides num 12)
    bound ((12 * div) + rem) | (DivBy prf) = rem + 1


partial
forever : Fuel
forever = More forever

quiz : Stream Int -> (score : Nat) -> ConsoleIO Nat
quiz (num1 :: (num2 :: nums)) score = do PutStr ("Score so far: " ++ show score ++ "\n")
                                         PutStr (show num1 ++ " * " ++ show num2 ++ "? ")
                                         answer <- GetLine
                                         if toLower answer == "quit" then Quit score else
                                           if (cast answer == num2 * num2)
                                              then do PutStr "Correct!\n"
                                                      quiz nums (score + 1)
                                              else do PutStr ("Wrong, the answer is " ++ show (num1 * num2) ++ "\n")
                                                      quiz nums score

partial 
main : IO ()
main = do seed <- time
          Just score <- run forever (quiz (arithInputs (fromInteger seed)) 0)
            | Nothing => putStrLn "No fuel left"
          putStrLn ("Final score: " ++ show score)

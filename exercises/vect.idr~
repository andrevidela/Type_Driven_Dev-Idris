
module Main

data Vect : Nat -> Type -> Type where
     Nil  : Vect Z a
     (::) : (x: a) -> (xs: Vect k a) -> Vect (S k) a

%name Vect xs, ys, zs
    
append : Vect m a -> Vect n a -> Vect (m + n) a
append [] [] = []
append [] right = right
append (x :: xs) right = x :: append xs right

zip : Vect n a -> Vect n b -> Vect n (a, b)
zip [] [] = []
zip (x :: xs) (y :: ys) = (x, y) :: zip xs ys
